basePath: /
definitions:
  domain.CreateTodoDTO:
    properties:
      description:
        type: string
      difficulty:
        enum:
        - 1
        - 2
        - 3
        example: 1
        type: integer
      end_date:
        example: "2024-03-20T10:00:00Z"
        type: string
      priority:
        enum:
        - 1
        - 2
        - 3
        example: 1
        type: integer
      title:
        type: string
      user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  domain.CreateUserDTO:
    properties:
      email:
        example: test@email.user.com
        type: string
      password:
        example: passwordconfig
        type: string
      role:
        description: user, admin
        example: user
        type: string
    type: object
  domain.ErrorResponse400:
    properties:
      error:
        example: Invalid request body
        type: string
    type: object
  domain.ErrorResponse401:
    properties:
      error:
        example: Unauthorized
        type: string
    type: object
  domain.ErrorResponse403:
    properties:
      error:
        example: Forbidden
        type: string
    type: object
  domain.ErrorResponse404:
    properties:
      error:
        example: Todo not found
        type: string
    type: object
  domain.ErrorResponse500:
    properties:
      error:
        example: Internal server error
        type: string
    type: object
  domain.LoginDTO:
    properties:
      email:
        example: test@email.user.com
        type: string
      password:
        example: passwordconfig
        type: string
    type: object
  domain.LoginReturn:
    properties:
      message:
        example: Login successful
        type: string
      refresh_token:
        example: your_refresh_token_here
        type: string
      token:
        example: your_token_here
        type: string
    type: object
  domain.RefreshTokenDTO:
    properties:
      refresh_token:
        example: your_token_here
        type: string
    type: object
  domain.RefreshTokenReturn:
    properties:
      message:
        example: Token refreshed successfully
        type: string
      refresh_token:
        example: your_new_refresh_token_here
        type: string
      token:
        example: your_new_token_here
        type: string
    type: object
  domain.Todo:
    properties:
      completed:
        type: boolean
      created_at:
        type: string
      description:
        type: string
      difficulty:
        description: 1:easy, 2:medium, 3:hard
        enum:
        - 1
        - 2
        - 3
        example: 1
        type: integer
      end_date:
        type: string
      id:
        example: 1
        type: integer
      priority:
        description: 1:low, 2:medium, 3:high
        enum:
        - 1
        - 2
        - 3
        example: 1
        type: integer
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  domain.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      password:
        type: string
      role:
        description: user, admin
        type: string
      updated_at:
        type: string
    type: object
  main.HealthCheckResponse:
    properties:
      message:
        example: OK
        type: string
    type: object
host: localhost:4444
info:
  contact:
    email: hamlert33@gmail.com
    name: wiwatsapon
  description: API user management Server by Fiber | Doc by Swagger.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: User API by Fiber and Swagger
  version: "1.0"
paths:
  /auth/delete/{email}:
    delete:
      consumes:
      - application/json
      description: Use for delete user by email.
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse400'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse500'
      summary: Delete user.
      tags:
      - users
  /auth/todos:
    get:
      consumes:
      - application/json
      description: Retrieve all todos from the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Todo'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse500'
      security:
      - BearerAuth: []
      summary: Get all todos
      tags:
      - todo
    post:
      consumes:
      - application/json
      description: Use for create to do.
      parameters:
      - description: Todo object
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/domain.CreateTodoDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Todo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse400'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse500'
      summary: Create to do.
      tags:
      - todo
  /auth/todos/{id}:
    delete:
      consumes:
      - application/json
      description: Delete todo to the system
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Todo'
        "400":
          description: Todo not found
          schema:
            $ref: '#/definitions/domain.ErrorResponse404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse500'
      security:
      - BearerAuth: []
      summary: Delete todo
      tags:
      - todo
    get:
      consumes:
      - application/json
      description: Retrieve todo by id from the system
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Todo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse400'
        "404":
          description: Todo not found
          schema:
            $ref: '#/definitions/domain.ErrorResponse404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse500'
      security:
      - BearerAuth: []
      summary: Get todo by id
      tags:
      - todo
    put:
      consumes:
      - application/json
      description: Update todo to the system
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Todo'
        "404":
          description: Todo not found
          schema:
            $ref: '#/definitions/domain.ErrorResponse404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse500'
      security:
      - BearerAuth: []
      summary: Update todo
      tags:
      - todo
  /healthcheck:
    get:
      consumes:
      - '*/*'
      description: Get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.HealthCheckResponse'
      summary: Show the status of server.
      tags:
      - root
  /login:
    post:
      consumes:
      - application/json
      description: Use for Login.
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.LoginReturn'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse400'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse500'
      summary: Login user.
      tags:
      - users
  /refreshToken:
    post:
      consumes:
      - application/json
      description: Use for Get New Token.
      parameters:
      - description: token
        in: body
        name: refreshToken
        required: true
        schema:
          $ref: '#/definitions/domain.RefreshTokenDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.RefreshTokenReturn'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse401'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse403'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse500'
      summary: Refresh Token.
      tags:
      - users
  /register:
    post:
      consumes:
      - application/json
      description: Use for create user.
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.CreateUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse400'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse500'
      summary: Register user.
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
